#! /usr/bin/perl

# This is software obtained from:
# https://github.com/agrawalsamarth/critical_bonds

# critical_bonds installation directory
$INSTALLDIR="./";

no warnings 'experimental::smartmatch';

sub USAGE {  print<<EOF;
NAME
       run-critical-bonds

SYNOPSIS
       perl run-critical-bonds <input-filename> [-o <cb-output-filename>] [-L <lammps-data-filename>] [-v]

DESCRIPTION
       This script takes the input file <cb-input-filename>, 
       runs critical_bonds on it, and saves the critical bonds in <cb-output-filename>. 

       Allowed input file formats are: 
       (i)  cb-formatted
       (ii) LAMMPS data file

       If the -L option is given, a LAMMPS data file <lammps-data-filename> is generated, 
       in which non-critical bonds have bond type 1, and critical bonds have bond type 2.

       If called without the -o option, the outputfile is <cb-input-filename>-cb.txt.

OPTIONS
    -o <cb-output-filename>
       writes the ist of critical bonds to the specified file.
    -L <lammps-data-filename>
       writes the created LAMMPS data file to the specified file
    -v
       creates additional stdout.
EOF
exit
};

$critical_bonds = "$INSTALLDIR/bin/critical_bonds";

if ($#ARGV eq -1) { USAGE; }; 
$inputfile=$ARGV[0]; if (-s "$inputfile") { } else { print "file $inputfile does not exist!\n"; exit; }; $outputfile="$inputfile-cb.txt"; chomp $outputfile;
foreach $iarg (0 .. $#ARGV) { $arg=$ARGV[$iarg]; ($field,$value)=split(/=/,$arg);
   if ($field eq "-v") { $verbose = "-v"; 
   } elsif ($arg   eq "-o")    { $outputfile=$ARGV[$iarg+1];
   } elsif ($field eq "-o")    { $outputfile=$value; 
   } elsif ($arg   eq "-L")    { $datafile=$ARGV[$iarg+1];
   } elsif ($field eq "-L")    { $datafile=$value;
   };
};

sub PRINT { if ($verbose) { print "[$0] @_\n"; }; };

# clean 
`rm -f .tmp$$.cb .tmp$$.data $outputfile`;

# recognize input file type
$LAMMPS = `head -20 $inputfile | grep -c "atom types"`+0; 

if ($LAMMPS) { 
   PRINT("recognized input file type: LAMMPS data");
   $LAMMPS_z = `head -20 $inputfile | grep -c "zhi"`+0;
   if ($LAMMPS_z) { $dimensions=""; } else { $dimensions="-2D"; }; 
   PRINT("convert LAMMPS data to cb_input_filename using all bonds");
   PRINT(`perl convert-lammps-data-2-cb.pl $inputfile $dimensions -o .tmp$$-input.txt $verbose`);
   $inputfile = ".tmp$$-input.txt"; 
} else { 
   PRINT("recognized input file type: cb-formatted");
}; 

# obtain dimensions from cb-formatted file 
`cp $inputfile .tmp$$.txt`;
open(IN,"<$inputfile"); $dimensions=<IN>; close(IN); if ($dimensions eq 2) { $dimensions="-2D"; } else { $dimensions=""; };

$percolated = 1; 

while ($percolated) { 
   PRINT("running critical_bonds ..",`$critical_bonds .tmp$$.txt .tmp$$.cb`); 
   `cat .tmp$$.cb >> $outputfile`; 
   if (-s ".tmp$$.cb") { } else { $percolated = 0; };

   PRINT("converting critical_bonds result to LAMMPS data file with bond types 1 and 2");
   PRINT(`perl convert-cb-2-lammps-data.pl $inputfile $outputfile -o .tmp$$.data $verbose`);

   PRINT("converting LAMMPS data to cb_input_filename using non-critical bonds only");
   PRINT(`perl convert-lammps-data-2-cb.pl .tmp$$.data $dimensions -o .tmp$$.txt -bondtype=1 $verbose`);
}; 

if ($datafile) { 
   `mv .tmp$$.data $datafile`; 
   print "created $datafile # a LAMMPS data file with two bond types. Critical bonds have bond type 2.\n";
};  

$critical_bonds = `grep -c . $outputfile`+0; 
PRINT("deleting .tmp$$-files",`rm -f .tmp$$.txt .tmp$$.cb .tmp$$.data .tmp$$-input.txt`); 
print "created $outputfile carrying $critical_bonds critical bonds\n"; 
