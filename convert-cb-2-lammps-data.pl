#! /usr/bin/perl

# (c) 18 april 2024 Martin Kroger, ETH Zurich, mk@mat.ethz.ch

$mol  = 1;     
$type = 1;
$q    = "0.0";
$cbtype = 2; 

sub USAGE { print<<EOF;
NAME
       convert-cb-2-lammps-data.pl

SYNOPSIS
       perl convert-cb-2-lammps-data.pl <cb-input-filename> <cb-output-filename> [-o <outputfile>] [-v] 

DESCRIPTION
       This script converts a pair of cb-input- and cb-output-files to lammps data format.
       In the lammps data file, non-critical bonds have bond type 1, critical bonds have bond type $cbtype. 

       If called without the -o option, the outputfile is <cb-output-filename>.data

OPTIONS
      -o <outputfile>
         writes the lammps data file (atomstyle: full) to the specified outputfile
         LAMMPS Atoms section format: id mol type $q x y z
         LAMMPS Bonds section format: bid btype b1 b2
         This format can be altered by changing mol, type, and q via -mol=.. -type=.. -q=.. 
         The default is: -mol=$mol -type=$type -q=$q
      -v
         creates additional stdout
EOF
exit
};

if ($#ARGV eq -1) { USAGE; };
$cbinputfile=$ARGV[0]; 
if (-s "$cbinputfile") { } else { print "missing file $cbinputfile\n"; exit; };
$cboutputfile=$ARGV[1];
if (-s "$cboutputfile") { } else { print "missing file $cboutputfile\n"; exit; };

foreach $iarg (0 .. $#ARGV)  { $arg=$ARGV[$iarg]; ($field,$value)=split(/=/,$arg);
   if ($arg eq "-o") {
      $outputfile=$ARGV[$iarg+1];
   } elsif ($field eq "-o") {
      $outputfile=$value; 
   } elsif ($arg eq "-v") {
      $verbose=1;
   } elsif ($field eq "-mol") { 
      $mol=$value;
   } elsif ($field eq "-type") {
      $type=$value;
   } elsif ($field eq "-q") {
      $q=$value;
   };
};
if (!$outputfile) { $outputfile="$cboutputfile.data"; };

if ($verbose) { print "mol=$mol type=$type q=$q\n"; };

sub strip { chomp $_[0]; $_[0]=~s/^\s+//g; $_[0]=~s/\s+$//; $_[0]=~s/\s+/ /g; $_[0]; };

# read critical_bonds input-file
open(CBIN,"<$cbinputfile"); 
$dimensions=<CBIN>+0;
if ($dimensions>3) { print "sorry, LAMMPS cannot hangle higher than 3-dimensional data\n"; exit; }; 
$line=<CBIN>; $line=strip($line); ($xlo,$xhi,$ylo,$yhi,$zlo,$zhi)=split(/ /,$line);
$nodes=<CBIN>+0; @x=(); @y=(); @z=();
foreach $id (1 .. $nodes) {
   $line=<CBIN>; $line=strip($line); ($x[$id],$y[$id],$z[$id])=split(/ /,$line);
};
$bonds=<CBIN>+0; @b1=(); @b2=(); @btype=();
foreach $bid (1 .. $bonds) {
   $line=<CBIN>; $line=strip($line); ($b1[$bid],$b2[$bid])=split(/ /,$line);
   $b1[$bid]+=1;
   $b2[$bid]+=1;
   $btype[$bid]=1; 
};
close(CBIN);
print "$nodes nodes connected by $bonds bonds retrieved from $cbinputfile.\n";

# read critical_bonds output-file
open(CBOUT,"<$cboutputfile"); 
$nc = 0; @cb1=(); @cb2=(); 
while (!eof(CBOUT)) {
   $nc+=1; 
   $line=<CBOUT>; $line=strip($line); ($cb1[$nc],$cb2[$nc])=split(/ /,$line);
   $cb1[$nc]+=1;
   $cb2[$nc]+=1;
};
close(CBOUT);
print "$nc critical bonds retrieved from $cboutputfile.\n";

# assigning btypes
foreach $cb (1 .. $nc) {
   $found=0;
   foreach $bid (1 .. $bonds) {
      if      (($b1[$bid] eq $cb1[$cb])&($b2[$bid] eq $cb2[$cb])) {
         if ($found) { die 'error'; }; 
         $found=1; $btype[$bid] = $cbtype; 
      } elsif (($b1[$bid] eq $cb2[$cb])&($b2[$bid] eq $cb1[$cb])) {
         if ($found) { die 'error'; }; 
         $found=1; $btype[$bid] = $cbtype;
      };
   };
   if ($found) { 
      if ($verbose) { print "[$cb/$nc] critical bond $cb1[$cb]-$cb2[$cb] converted to bond type $cbtype\n"; }; 
   } else { 
      print "Problem: critical bond $cb1[$cb]-$cb2[$cb] not found in $cbinputfile.\n"; exit; 
   };
};
if ($verbose) { 
   $count_cbtypes=0; foreach $bid (1 .. $bonds) { if ($btype[$bid] eq $cbtype) { $count_cbtypes+=1; }; };
   print "$count_cbtypes bonds have type $cbtype\n";
};

# create lammps data file
print "writing to $outputfile (critical bonds have bond type $cbtype)\n";
open(OUT,">$outputfile"); 
print OUT "# lammps data file generated by $0. Bond type: 1 (noncritical bond), type 2 (critical bond)\n\n";
print OUT "$nodes atoms\n";
print OUT "$bonds bonds\n";
print OUT "1 atom types\n";
print OUT "2 bond types\n\n";
print OUT "$xlo $xhi xlo xhi\n";
if ($dimensions > 1) { print OUT "$ylo $yhi ylo yhi\n"; };
if ($dimensions > 2) { print OUT "$zlo $zhi zlo zhi\n"; };
print OUT "\nAtoms\n\n"; 
foreach $id (1 .. $nodes) { print OUT "$id $mol $type $q $x[$id] $y[$id] $z[$id]\n"; }; 
print OUT "\nBonds\n\n";
foreach $bid (1 .. $bonds) { print OUT "$bid $btype[$bid] $b1[$bid] $b2[$bid]\n"; };
close(OUT);
